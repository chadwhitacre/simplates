=Example 5: Generating an Image Dynamically=

In this example we show two things:

  # using the querystring
  # fully customizing the `response` object

We are going to dynamically serve header images as GIF files from URLs of the form:

{{{
http://www.example.com/heading.gif?text=My%20Heading
}}}

We will assume that the [http://www.pythonware.com/products/pil/ Python Imaging Library (PIL)] is installed.


=== settings.py ===

{{{
SIMPLATE_DIRS = (
    '/path/to/simplates',
)
TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.core.context_processors.request'
)
}}}

As [EgFormProcessing before], we need to install the `request` context processor in `settings.py` in order to use API from Django's `request` object inside our simplate. In this case, we want to use `request.GET`.


=== urls.py ===

{{{
from django.conf.urls.defaults import *
from simplates.views import direct_to_simplate


urlpatterns = patterns('',
    (r'^header.gif$', direct_to_simplate),
)
}}}


=== simplate at /path/to/simplates/header.gif ===

Unlike all our previous examples, this simplate will not use a Django template. We will only ever define an explicit `response` object. Note, however, that in order for the simplate processor to know how to interpret each section, we still need two section breaks. We simply leave the template section empty.

{{{
import Imaging # or whatever
from django import http


#<!--===BREAK===-->

text = request.GET.get('text').strip()
if not text:
    raise SystemExit(http.HttpBadRequest)

#@: process image and write to response
response = http.HttpResponse()

#<!--===BREAK===-->
[empty template]
}}}


== Next Example: [EgImageGeneration Generating an Image Dynamically] ==