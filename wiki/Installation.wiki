= Installation =

This doc tells you how to wire simplates into your Django project. It covers everything up to actually writing your first simplate.

Check the trunk out of svn into a simplates directory on your python path.

@@: easy_install? At least have a tarball/ZIP.

You get a `direct_to_simplates` view, which you use in `urls.py` like so:

{{{
from simplates.views import direct_to_simplate
urlpatterns = patterns('',
    ( r'^greetings/(?P<program>[^/]+)/$'
    , direct_to_simplate
    , {'simplate':'greetings/program.html'}
     ),
    (r'^$', direct_to_simplate)
)
}}}

The optional 'simplate' argument specifies a single simplate to handle the request. If no simplate is specified, the request will be mapped literally to the filesystem on the basis of `request.META['PATH_INFO']`. Whether `PATH_INFO` or the simplate argument are used, Simplates tries to resolve the request using the directories specified in `settings.SIMPLATE_DIRS` and the default filenames specified in `settings.SIMPLATE_DEFAULTS`:

{{{
SIMPLATE_DIRS = (
  '/opt/site/simplates'
)
SIMPLATE_DEFAULTS = ('index.html', 'index.htm')
}}}

So, for example, based on the above `urls.py` and `settings.py`, here is how requests would map:

{{{
http://www.example.com/                  => /opt/site/simplates/index.html
http://www.example.com/about/us.html     => /opt/site/simplates/about/us.html
http://www.example.com/greetings/python/ => /opt/site/simplates/greetings/program.html
http://www.example.com/greetings/django/ => /opt/site/simplates/greetings/program.html
}}}

Captured values in the regular expressions in `urls.py` are available in a `params` dictionary in your simplate.

== Next: [Installation Installation] ==